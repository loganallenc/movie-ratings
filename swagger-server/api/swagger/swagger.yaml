swagger: "2.0"
info:
  version: 1.0.0
  title: rotten-tomatoes
  description: A sample API for a movie reviews Android app that utilizes Rotten Tomatoes.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Logan Allen
    email: loganallc@gmail.com
    url: http://www.loganallen.co
  license:
    name: MIT
    url: http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT
host: petstore.swagger.io
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /movie_titles/{filterBy}:
    x-swagger-router-controller: movie_titles
    get:
      description: return movie titles using filterBy and options queries
      operationId: searchFilterMovieTitles
      parameters:
        - name: filterBy
          in: path
          description: parameter to filter by. acceptable vals are: overview, major
          required: true
          type: string
        - name: other
          in: query
          description: optional parameter. if filterBy=major, other=cs, me, etc
          required: true
          type: string
      responses:
        200:
          description: return list of movie titles matching filter
          schema:
            $ref: '#/definitions/MovieTitles'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /ratings:
    x-swagger-router-controller: rating
    post:
      description: creates a rating for a movie
      operationId: createRating
      consumes:
        - application/json
      parameters:
        - name: rating
          in: body
          description: Rating of movie, text of rating, and movie Title
          required: true
          schema:
            $ref: '#/definitions/Rating'
      responses:
        201:
          description: rating created
          schema:
            $ref: '#/definitions/Rating'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
            
  /ratings/{movieTitle}:
    x-swagger-router-controller: ratings
    get:
      description: gets all ratings for a particular movie Title
      operationId: getRatings
      parameters:
        - name: movieTitle
          in: path
          description: movieTitle to fetch ratings for
          required: true
          type: string
      responses:
        200:
          description: ratings response
          schema:
            $ref: '#/definitions/Ratings'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users:
    x-swagger-router-controller: users
    post:
      description: creates a single user
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          description: Username and password of user to create
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        201:
          description: user created
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
  /users/{username}:
    x-swagger-router-controller: user
    get:
      description: |
        Returns a user based on a single username,
        error if the user does not have correct password.
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: username of user to fetch
          required: true
          type: string
        - name: password
          in: header
          description: password of user to fetch
          required: true
          type: string
      responses:
        200:
          description: user response
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: updates a single user
      consumes: 
        - application/octet-stream
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: Username of user to update
          required: true
          type: string
        - name: password
          in: header
          description: Password of user to update
          required: true
          type: string
        - name: profile
          in: body
          description: Profile info to update
          required: true
          schema:
            $ref: '#/definitions/Profile'
      responses:
        201:
          description: user updated
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: deletes a single user based on the username supplied
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Username of user to delete
          required: true
          type: string
        - name: password
          in: header
          description: Password of user to delete
          required: true
          type: string
      responses:
        204:
          description: user deleted
          schema:
            $ref: '#/definitions/User'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  User:
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
      profile:
        $ref: '#/definitions/Profile'
  Profile:
    required:
      - name
      - profileID
      - major
    properties:
      name:
        type: string
      profileID:
        type: integer
      major:
        type: string
  Rating:
    required:
      - rating
      - text
      - movieTitle
      - user
      - major
    properties:
      rating:
        type: integer
      text:
        type: string
      movieTitle:
        type: string
      user:
        type: string
      major:
        type: string
  Ratings:
    required:
      - ratings
      - movieTitle
    properties:
      ratings:
        type: array
        items:
          $ref: '#/definitions/Rating'
      movieTitle:
        type: string
  MovieTitles:
    required:
      - movieTitles
    properties:
      movieTitles:
        type: array
        items:
          type: string
  Error:
    required:
      - message
    properties:
      message:
        type: string

